// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	products "mikro/business/products"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, domain
func (_m *Usecase) Create(ctx context.Context, domain products.Domain) (products.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 products.Domain
	if rf, ok := ret.Get(0).(func(context.Context, products.Domain) products.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, domain
func (_m *Usecase) Delete(ctx context.Context, domain products.Domain) error {
	ret := _m.Called(ctx, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, products.Domain) error); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Usecase) GetAll(ctx context.Context) ([]products.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []products.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []products.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetById(ctx context.Context, domain products.Domain) (products.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 products.Domain
	if rf, ok := ret.Get(0).(func(context.Context, products.Domain) products.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, domain
func (_m *Usecase) Update(ctx context.Context, domain products.Domain) (products.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 products.Domain
	if rf, ok := ret.Get(0).(func(context.Context, products.Domain) products.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
